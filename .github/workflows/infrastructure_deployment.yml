name: Deploy Infrastructure to Azure

on:
  push:
    branches: [ "master" ]
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    branches:
      - master

permissions:
  contents: read

jobs:
  terraform_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Terraform deployment
    environment: production
    env:
      working-directory: infrastructure/azure

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.working-directory }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ${{ env.working-directory }}

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -var-file=env/prod.tfvars
        working-directory: ${{ env.working-directory }}

        # On push to "master", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: terraform apply -var-file=env/prod.tfvars
        working-directory: ${{ env.working-directory }}

